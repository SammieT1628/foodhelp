{"ast":null,"code":"var _jsxFileName = \"/Users/samanthathompson/Bingus/foodhelp/Frontend/src/Components/MainArea/ListGroup.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\n//shape of the input to this component\n//pass an obeject { items:[], heading: string} using an interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ListGroup({\n  names,\n  heading\n}) {\n  _s();\n  const name = 'Samantha Thompson';\n  const username = 'tsammie16';\n  const email = 'tsammie16@gmail.com';\n  const phoneNum = '(636)357-9633';\n\n  //Hook function - it allows us to tap into built in feature in react\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  //if items = [];\n  /*if (names.length === 0) {\n      return (\n          <>\n          <p>No names found</p>\n          </>\n      )\n  }*/\n  //const message = names.length === 0 ? <p>No names to be found</p> : null\n  //benefit of using a function in this case is that our functions can take parameters\n  const getMessage = () => {\n    return names.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No names to be found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 59\n    }, this) : 1;\n  };\n  //Event handler\n  ///const handleClick = (event: MouseEvent) => console.log(event)\n  //const handleClick = (event: MouseEvent) => console.log(name, )\n  //when calling handlClick in the jsx we dont call it like this handleCLick() we \n  //just want to put a reference to the function. It will run during runtime\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: heading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Name: \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Username: \", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Email: \", email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), getMessage()\n      /* we can also do {names.length === 0 && <p>No names to be found</p>}*/, /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Phone Number: \", phoneNum]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), names.map((name, index) =>\n      /*#__PURE__*/\n      //normally when we get data from api we would have name.id for the key\n      _jsxDEV(\"li\", {\n        className: selectedIndex === index ? 'bg-blue-600' : 'bg-blue-400',\n        onClick: () => {\n          setSelectedIndex(index);\n        },\n        children: name\n      }, name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(ListGroup, \"XqFePntU6c46qlDmSkVXx6A2AiM=\");\n_c = ListGroup;\nexport default ListGroup;\nvar _c;\n$RefreshReg$(_c, \"ListGroup\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ListGroup","names","heading","_s","name","username","email","phoneNum","selectedIndex","setSelectedIndex","getMessage","length","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","className","onClick","_c","$RefreshReg$"],"sources":["/Users/samanthathompson/Bingus/foodhelp/Frontend/src/Components/MainArea/ListGroup.tsx"],"sourcesContent":["import { MouseEvent, useState } from \"react\";\n//shape of the input to this component\n//pass an obeject { items:[], heading: string} using an interface\ninterface Props {\n    names: string[];\n    heading: string;\n}\n\nfunction ListGroup({names, heading}: Props) {\n    const name = 'Samantha Thompson';\n    const username = 'tsammie16';\n    const email = 'tsammie16@gmail.com';\n    const phoneNum = '(636)357-9633'\n\n    //Hook function - it allows us to tap into built in feature in react\n    const [selectedIndex, setSelectedIndex] = useState(-1)\n    //if items = [];\n    /*if (names.length === 0) {\n        return (\n            <>\n            <p>No names found</p>\n            </>\n        )\n    }*/\n    //const message = names.length === 0 ? <p>No names to be found</p> : null\n    //benefit of using a function in this case is that our functions can take parameters\n    const getMessage = () => {return names.length === 0 ? <p>No names to be found</p> : 1}\n    //Event handler\n    ///const handleClick = (event: MouseEvent) => console.log(event)\n    //const handleClick = (event: MouseEvent) => console.log(name, )\n    //when calling handlClick in the jsx we dont call it like this handleCLick() we \n    //just want to put a reference to the function. It will run during runtime\n\n    \n    return (\n    <>\n        <h1>{heading}</h1>\n        <ul>\n            <li>Name: {name}</li>\n            <li>Username: {username}</li>\n            <li>Email: {email}</li>\n            {getMessage()\n            /* we can also do {names.length === 0 && <p>No names to be found</p>}*/}\n            \n            <li>Phone Number: {phoneNum}</li>\n            {names.map((name, index) => (\n                //normally when we get data from api we would have name.id for the key\n                <li\n                className={selectedIndex === index ? 'bg-blue-600' : 'bg-blue-400'}\n                key={name}\n                onClick={() => {setSelectedIndex(index)}}>{name}</li>\n            ))}\n        </ul>\n    </>\n    )\n}\n\nexport default ListGroup;"],"mappings":";;AAAA,SAAqBA,QAAQ,QAAQ,OAAO;AAC5C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAMA,SAASC,SAASA,CAAC;EAACC,KAAK;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EACxC,MAAMC,IAAI,GAAG,mBAAmB;EAChC,MAAMC,QAAQ,GAAG,WAAW;EAC5B,MAAMC,KAAK,GAAG,qBAAqB;EACnC,MAAMC,QAAQ,GAAG,eAAe;;EAEhC;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA,MAAMe,UAAU,GAAGA,CAAA,KAAM;IAAC,OAAOT,KAAK,CAACU,MAAM,KAAK,CAAC,gBAAGd,OAAA;MAAAe,QAAA,EAAG;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAAG,CAAC;EAAA,CAAC;EACtF;EACA;EACA;EACA;EACA;;EAGA,oBACAnB,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAKV;IAAO;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClBnB,OAAA;MAAAe,QAAA,gBACIf,OAAA;QAAAe,QAAA,GAAI,QAAM,EAACR,IAAI;MAAA;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBnB,OAAA;QAAAe,QAAA,GAAI,YAAU,EAACP,QAAQ;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7BnB,OAAA;QAAAe,QAAA,GAAI,SAAO,EAACN,KAAK;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACtBN,UAAU,CAAC;MACZ,sFAEAb,OAAA;QAAAe,QAAA,GAAI,gBAAc,EAACL,QAAQ;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAChCf,KAAK,CAACgB,GAAG,CAAC,CAACb,IAAI,EAAEc,KAAK;MAAA;MACnB;MACArB,OAAA;QACAsB,SAAS,EAAEX,aAAa,KAAKU,KAAK,GAAG,aAAa,GAAG,aAAc;QAEnEE,OAAO,EAAEA,CAAA,KAAM;UAACX,gBAAgB,CAACS,KAAK,CAAC;QAAA,CAAE;QAAAN,QAAA,EAAER;MAAI,GAD1CA,IAAI;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC2C,CACvD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA,eACP,CAAC;AAEP;AAACb,EAAA,CA/CQH,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AAiDlB,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}